/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package schoolmanagementsystem;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rimi
 */
public class Marks extends javax.swing.JFrame {

    /**
     * Creates new form Marks
     */
    public Marks() {
        initComponents();
        
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(75);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(40);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
        
        
        Connect();
        Load_Class();
        Load_Section();
        Load_Subject();
        Marks_Load();

        setTitle("School Management System");
    }

    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    DefaultTableModel d;

    public void Connect() {

        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/schoolmanagement", "root", "");

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtno = new javax.swing.JTextField();
        txtstname = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        txtsubject = new javax.swing.JComboBox<>();
        txtclass = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtctmark = new javax.swing.JTextField();
        txtasmark = new javax.swing.JTextField();
        txtatmark = new javax.swing.JTextField();
        txtmark = new javax.swing.JTextField();
        txtterm = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        txtsection = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        txttotal = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 204));
        jLabel1.setText("Student Grade");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setForeground(new java.awt.Color(51, 0, 204));
        jLabel2.setText("Student ID");

        jLabel3.setForeground(new java.awt.Color(51, 0, 204));
        jLabel3.setText("Student Name");

        jLabel4.setForeground(new java.awt.Color(51, 0, 204));
        jLabel4.setText("Class");

        jLabel5.setForeground(new java.awt.Color(51, 0, 204));
        jLabel5.setText("Subject");

        jLabel7.setForeground(new java.awt.Color(51, 0, 204));
        jLabel7.setText("Term");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel8.setForeground(new java.awt.Color(51, 0, 204));
        jLabel8.setText("Class Test(20)");

        jLabel9.setForeground(new java.awt.Color(51, 0, 204));
        jLabel9.setText("Assignment(10)");

        jLabel10.setForeground(new java.awt.Color(51, 0, 204));
        jLabel10.setText("Attendence(10)");

        jLabel11.setForeground(new java.awt.Color(51, 0, 204));
        jLabel11.setText("Mark(60)");

        txtterm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "First Term", "Second Term", "Final Term" }));
        txtterm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txttermActionPerformed(evt);
            }
        });

        jLabel12.setForeground(new java.awt.Color(51, 0, 204));
        jLabel12.setText("Section");

        jLabel6.setForeground(new java.awt.Color(51, 0, 204));
        jLabel6.setText("Total");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(179, 179, 179)
                        .addComponent(jButton1)
                        .addContainerGap(14, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtterm, 0, 134, Short.MAX_VALUE)
                                    .addComponent(txtsection, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtctmark)
                                    .addComponent(txtasmark)
                                    .addComponent(txtatmark)
                                    .addComponent(txtmark)
                                    .addComponent(txtsubject, 0, 134, Short.MAX_VALUE)
                                    .addComponent(txtclass, 0, 134, Short.MAX_VALUE)
                                    .addComponent(txtstname, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                    .addComponent(txtno, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                    .addComponent(txttotal))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtstname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtclass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtsection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtterm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtsubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtctmark, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtasmark, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtatmark, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtmark, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txttotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9))
        );

        jButton2.setText("Save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Edit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Back");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sequence", "SID", "Student Name", "Class", "Section", "Term", "Subject", "Mark", "Grade"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton5.setText("Clear");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Delete");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(326, 326, 326)
                        .addComponent(jLabel1)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton5)
                    .addComponent(jButton4)
                    .addComponent(jButton6))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void Marks_Load() {
        int c;
        try {
            pst = con.prepareStatement("SELECT * FROM marks");
            rs = pst.executeQuery();

            ResultSetMetaData rsd = rs.getMetaData();
            c = rsd.getColumnCount();

            d = (DefaultTableModel) jTable1.getModel();
            d.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 1; i <= c; i++) {

                    v2.add(rs.getString("id"));
                    v2.add(rs.getString("sid"));
                    v2.add(rs.getString("name"));
                    v2.add(rs.getString("class"));
                    v2.add(rs.getString("section"));
                    v2.add(rs.getString("term"));
                    v2.add(rs.getString("subject"));                   
                    //v2.add(rs.getString("mark"));
                    v2.add(rs.getString("totalmark"));
                    v2.add(rs.getString("grade"));

                }

                d.addRow(v2);
            }

        } catch (SQLException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:

            String sid = txtno.getText();

            pst = con.prepareStatement("select * from Student where id = ?");
            pst.setString(1, sid);
            rs = pst.executeQuery();

            if (rs.next() == false) {
                JOptionPane.showMessageDialog(this, "Student ID Not Found");
                txtstname.setText("");
                txtclass.setSelectedIndex(-1);
                txtsection.setSelectedIndex(-1);
                
            } else {
                String name = rs.getString("sname");
                txtstname.setText(name.trim());
                txtstname.setEnabled(false);
                
                String classes = rs.getString("class");
                txtclass.removeAllItems();
                txtclass.addItem(classes.trim());
                txtclass.setEnabled(false);
                
                String section = rs.getString("section");
                txtsection.removeAllItems();
                txtsection.addItem(section.trim());
                txtsection.setEnabled(false);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Marks.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:

        int selectIndex = jTable1.getSelectedRow();

        // Check if a row is selected
        if (selectIndex != -1) {
            // Retrieve data from the selected row in the DefaultTableModel
            String id = d.getValueAt(selectIndex, 0).toString();
            String studentID = d.getValueAt(selectIndex, 1).toString();
            String studentName = d.getValueAt(selectIndex, 2).toString();
            String classes = d.getValueAt(selectIndex, 3).toString();
            String section = d.getValueAt(selectIndex, 4).toString();
            String term = d.getValueAt(selectIndex, 5).toString();
            String subject = d.getValueAt(selectIndex, 6).toString();
            int totalMark = Integer.parseInt(d.getValueAt(selectIndex, 7).toString());

            // Set the retrieved data in the respective fields
            txtno.setText(studentID);
            txtstname.setText(studentName);
            txtclass.setSelectedItem(classes);
            txtsection.setSelectedItem(section);
            txtterm.setSelectedItem(term);
            txtsubject.setSelectedItem(subject);
            txttotal.setText(String.valueOf(totalMark));

            txtno.setEnabled(false);
            txtstname.setEnabled(false);
            txtclass.setEnabled(false);
            txtsection.setEnabled(false);
            txtterm.setEnabled(false);
            txtsubject.setEnabled(false);
                            
            // Fetch and set the mark value from the database
            try {
                pst = con.prepareStatement("SELECT mark FROM marks WHERE id = ?");
                pst.setString(1, id);
                rs = pst.executeQuery();

                if (rs.next()) {
                    int mark = rs.getInt("mark");
                    txtmark.setText(String.valueOf(mark));
                    
                    jButton1.setEnabled(false);
                    jButton2.setEnabled(false);
                    txttotal.setEnabled(false);
                } else {
                    JOptionPane.showMessageDialog(this, "No mark found for the selected student.");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Marks.class.getName()).log(Level.SEVERE, null, ex);
            }
            } else {
            JOptionPane.showMessageDialog(this, "Please select a row.");
        }
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        this.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:

        txtno.setEnabled(true);
        txtstname.setEnabled(true);
        txtclass.setEnabled(true);
        txtsection.setEnabled(true);
        txtterm.setEnabled(true);
        txtsubject.setEnabled(true);
        txtctmark.setEnabled(true);
        txtasmark.setEnabled(true);
        txtatmark.setEnabled(true);
        txttotal.setEnabled(true);
        
        txtno.setText("");
        txtstname.setText("");
        txtclass.setSelectedIndex(-1);
        txtsection.setSelectedIndex(-1);
        txtterm.setSelectedIndex(-1);
        txtsubject.setSelectedIndex(-1);
        txtctmark.setText("");
        txtasmark.setText("");
        txtatmark.setText("");
        txtmark.setText("");
        txttotal.setText("");
                
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        d = (DefaultTableModel) jTable1.getModel();
        int selectedRowIndex = jTable1.getSelectedRow();

        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please Select a Row to Edit.");
            return;
        }

        String id = d.getValueAt(selectedRowIndex, 0).toString(); 
        
        String currentMarks = d.getValueAt(selectedRowIndex, 7).toString();
        String newMarks = txtmark.getText();
        
        
        int sum = Integer.parseInt(txtctmark.getText()) + Integer.parseInt(txtasmark.getText()) + Integer.parseInt(txtatmark.getText());
        int mark = Integer.parseInt(newMarks);

        int totalMark = sum + mark;
        
        String grade = calculateGrade(totalMark);
        
        if (!newMarks.equals(currentMarks)) {
        // Update the mark in the database
        try {
            pst = con.prepareStatement("UPDATE marks SET mark = ?, totalmark = ?, grade = ? WHERE id = ?");
            pst.setString(1, newMarks);
            pst.setInt(2,totalMark);
            pst.setString(3, grade);
            pst.setString(4, id);

            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Student's mark edited successfully!");

            // Update the mark in the jTable
            d.setValueAt(totalMark, selectedRowIndex, 7);
            d.setValueAt(grade, selectedRowIndex, 8);

            txttotal.setText(String.valueOf(totalMark));
            
        } catch (SQLException ex) {
            Logger.getLogger(Marks.class.getName()).log(Level.SEVERE, null, ex);
        }
        } else {
            // If the mark is not changed, display a message
            JOptionPane.showMessageDialog(this, "You can only edit the mark field. Other information cannot be changed.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private String calculateGrade(int totalMark) {
    // Define your grading criteria here
        if (totalMark >= 80) {
            return "A+";
        } else if (totalMark >= 70 && totalMark < 80) {
            return "A";
        } else if (totalMark >= 60 && totalMark < 70) {
            return "A-";
        } else if (totalMark >= 50 && totalMark < 60) {
            return "B";
        } else if (totalMark >= 40 && totalMark < 50) {
            return "C";
        } else if (totalMark >= 33 && totalMark < 40) {
            return "C";
        } else {
            return "F";
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        String sno = txtno.getText();
        String sname = txtstname.getText();
        String classes = txtclass.getSelectedItem().toString();
        String section = txtsection.getSelectedItem().toString();       
        String term = txtterm.getSelectedItem().toString();
        String subject = txtsubject.getSelectedItem().toString();
        
        int sum = Integer.parseInt(txtctmark.getText()) + Integer.parseInt(txtasmark.getText()) + Integer.parseInt(txtatmark.getText());
        int mark = Integer.parseInt(txtmark.getText());

        int totalMark = sum + mark;
        
        String grade = calculateGrade(totalMark);        

        try {
            pst = con.prepareStatement("insert into marks(sid,name,class,section,term,subject,mark,totalMark,grade) values(?,?,?,?,?,?,?,?,?)");

            pst.setString(1, sno);
            pst.setString(2, sname);
            pst.setString(3, classes);
            pst.setString(4, section);
            pst.setString(5, term);
            pst.setString(6, subject); 
            pst.setInt(7,mark);
            pst.setInt(8, totalMark);
            pst.setString(9, grade);
            

            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Student's Grade Added Successfully!");

            
            Load_Class();
            Load_Section();
            
            txtstname.setEnabled(true);
            txtclass.setEnabled(true);
            txtsection.setEnabled(true);
            
            txtno.setText("");
            txtstname.setText("");
            txtclass.setSelectedIndex(-1);
            txtsection.setSelectedIndex(-1);
            txtterm.setSelectedIndex(-1);
            txtsubject.setSelectedIndex(-1);
            txtctmark.setText("");
            txtasmark.setText("");
            txtatmark.setText("");
            txtmark.setText("");
            txttotal.setText("");

            Marks_Load();

        } catch (SQLException ex) {
            Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void txttermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txttermActionPerformed
        // TODO add your handling code here:
        
        // Retrieve the selected term
        Object selectedTermObj = txtterm.getSelectedItem();

        // Check if the selected term is null
        if (selectedTermObj == null) {
            JOptionPane.showMessageDialog(this, "Please select a term.");
            return;
        }

        // Convert the selected term to string
        String selectedTerm = selectedTermObj.toString();

        // Retrieve the student name
        String studentName = txtstname.getText().trim();

        if (studentName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a student name.");
            return;
        }

        // Query the database for assessment marks based on the selected term and student name
        try {
            pst = con.prepareStatement("SELECT subject, ctmark, asmark, atmark FROM assessment WHERE term = ? AND sname = ?");
            pst.setString(1, selectedTerm);
            pst.setString(2, studentName);
            rs = pst.executeQuery();

            if (rs.next()) {
                // Populate the text fields with the fetched marks
                txtsubject.setSelectedItem(rs.getString("subject"));
                txtctmark.setText(rs.getString("ctmark"));
                txtasmark.setText(rs.getString("asmark"));
                txtatmark.setText(rs.getString("atmark"));
                
                txtctmark.setEnabled(false);
                txtasmark.setEnabled(false);
                txtatmark.setEnabled(false);
            } else {
                // Handle case where no assessment marks are found for the selected term and student name
                txtsubject.setSelectedIndex(-1);
                txtctmark.setText("");
                txtasmark.setText("");
                txtatmark.setText("");
                JOptionPane.showMessageDialog(this, "No assessment marks found for the selected term and student name.");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Marks.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_txttermActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        
        try {
            
            d = (DefaultTableModel)jTable1.getModel();
            int selectIndex = jTable1.getSelectedRow();

            if (jTable1.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(this, "Please Select a Row to Delete.");
                return;
            }
            
            String id = d.getValueAt(selectIndex, 0).toString();
        
            pst = con.prepareStatement("delete from marks where id = ? ");
            pst.setString(1, id);
            
            
            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Student Marks Information Deleted Successfully!");
            
            txtno.setText("");
            txtstname.setText("");
            txtclass.setSelectedIndex(-1);
            txtsection.setSelectedIndex(-1);
            txtterm.setSelectedIndex(-1);
            txtsubject.setSelectedIndex(-1);
            txtctmark.setText("");
            txtasmark.setText("");
            txtatmark.setText("");
            txtmark.setText("");
            txttotal.setText("");
            
            Marks_Load();
            
            jButton1.setEnabled(true);
            jButton2.setEnabled(true);
            txtno.setEnabled(true);
            txtstname.setEnabled(true);
            txtclass.setEnabled(true);
            txtsection.setEnabled(true);
            txtterm.setEnabled(true);
            txtsubject.setEnabled(true);
            txtctmark.setEnabled(true);
            txtasmark.setEnabled(true);
            txtatmark.setEnabled(true);
            txttotal.setEnabled(true);
            
        } catch (SQLException ex) {
            Logger.getLogger(Student.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    public void Load_Subject() {
        try {
            pst = con.prepareStatement("select Distinct subjectname from subject");
            rs = pst.executeQuery();
            txtsubject.removeAllItems();

            while (rs.next()) {
                txtsubject.addItem(rs.getString("subjectname"));
            }

        } catch (SQLException ex) {
            Logger.getLogger(Exam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void Load_Class() {
        try {
            pst = con.prepareStatement("select Distinct classname from class");
            rs = pst.executeQuery();
            txtclass.removeAllItems();
            
            while(rs.next())
            {
                txtclass.addItem(rs.getString("classname"));
            }

        } catch (SQLException ex) {
            Logger.getLogger(Exam.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    public void Load_Section() {
        try {
            pst = con.prepareStatement("select Distinct section from class");
            rs = pst.executeQuery();
            txtsection.removeAllItems();
            
            while(rs.next())
            {
                txtsection.addItem(rs.getString("section"));
            }

        } catch (SQLException ex) {
            Logger.getLogger(Exam.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Marks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Marks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Marks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Marks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Marks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtasmark;
    private javax.swing.JTextField txtatmark;
    private javax.swing.JComboBox<String> txtclass;
    private javax.swing.JTextField txtctmark;
    private javax.swing.JTextField txtmark;
    private javax.swing.JTextField txtno;
    private javax.swing.JComboBox<String> txtsection;
    private javax.swing.JTextField txtstname;
    private javax.swing.JComboBox<String> txtsubject;
    private javax.swing.JComboBox<String> txtterm;
    private javax.swing.JTextField txttotal;
    // End of variables declaration//GEN-END:variables
}
